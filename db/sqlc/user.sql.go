// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id,
    username,
    hashed_password,
    full_name,
    phone,
    avatar_url,
    job_title,
    linkedin_url,
    email
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, username, hashed_password, full_name, email, phone, job_title, avatar_url, linkedin_url, is_email_verified, password_changed_at, create_at
`

type CreateUserParams struct {
	ID             uuid.UUID `json:"id"`
	Username       string    `json:"username"`
	HashedPassword string    `json:"hashed_password"`
	FullName       string    `json:"full_name"`
	Phone          string    `json:"phone"`
	AvatarUrl      string    `json:"avatar_url"`
	JobTitle       string    `json:"job_title"`
	LinkedinUrl    string    `json:"linkedin_url"`
	Email          string    `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Phone,
		arg.AvatarUrl,
		arg.JobTitle,
		arg.LinkedinUrl,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.JobTitle,
		&i.AvatarUrl,
		&i.LinkedinUrl,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.CreateAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, hashed_password, full_name, email, phone, job_title, avatar_url, linkedin_url, is_email_verified, password_changed_at, create_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.JobTitle,
		&i.AvatarUrl,
		&i.LinkedinUrl,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.CreateAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, hashed_password, full_name, email, phone, job_title, avatar_url, linkedin_url, is_email_verified, password_changed_at, create_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.JobTitle,
		&i.AvatarUrl,
		&i.LinkedinUrl,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.CreateAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET 
    hashed_password = COALESCE($1, hashed_password),
    password_changed_at = COALESCE($2, password_changed_at),
    full_name = COALESCE($3, full_name),
    email = COALESCE($4, email),
    phone = COALESCE($5, phone),
    job_title = COALESCE($6, job_title),
    avatar_url = COALESCE($7, avatar_url),
    is_email_verified = COALESCE($8, is_email_verified),
    linkedin_url = COALESCE($9, linkedin_url)
WHERE id = $10
RETURNING id, username, hashed_password, full_name, email, phone, job_title, avatar_url, linkedin_url, is_email_verified, password_changed_at, create_at
`

type UpdateUserParams struct {
	HashedPassword    pgtype.Text        `json:"hashed_password"`
	PasswordChangedAt pgtype.Timestamptz `json:"password_changed_at"`
	FullName          pgtype.Text        `json:"full_name"`
	Email             pgtype.Text        `json:"email"`
	Phone             pgtype.Text        `json:"phone"`
	JobTitle          pgtype.Text        `json:"job_title"`
	AvatarUrl         pgtype.Text        `json:"avatar_url"`
	IsEmailVerified   pgtype.Bool        `json:"is_email_verified"`
	LinkedinUrl       pgtype.Text        `json:"linkedin_url"`
	ID                uuid.UUID          `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.FullName,
		arg.Email,
		arg.Phone,
		arg.JobTitle,
		arg.AvatarUrl,
		arg.IsEmailVerified,
		arg.LinkedinUrl,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.JobTitle,
		&i.AvatarUrl,
		&i.LinkedinUrl,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.CreateAt,
	)
	return i, err
}

const updateUserById = `-- name: UpdateUserById :one
UPDATE users 
SET 
    hashed_password = COALESCE($1, hashed_password),
    password_changed_at = COALESCE($2, password_changed_at),
    full_name = COALESCE($3, full_name),
    email = COALESCE($4, email),
    phone = COALESCE($5, phone),
    job_title = COALESCE($6, job_title),
    avatar_url = COALESCE($7, avatar_url),
    linkedin_url = COALESCE($8, linkedin_url)
WHERE id = $9
RETURNING id, username, hashed_password, full_name, email, phone, job_title, avatar_url, linkedin_url, is_email_verified, password_changed_at, create_at
`

type UpdateUserByIdParams struct {
	HashedPassword    pgtype.Text        `json:"hashed_password"`
	PasswordChangedAt pgtype.Timestamptz `json:"password_changed_at"`
	FullName          pgtype.Text        `json:"full_name"`
	Email             pgtype.Text        `json:"email"`
	Phone             pgtype.Text        `json:"phone"`
	JobTitle          pgtype.Text        `json:"job_title"`
	AvatarUrl         pgtype.Text        `json:"avatar_url"`
	LinkedinUrl       pgtype.Text        `json:"linkedin_url"`
	ID                uuid.UUID          `json:"id"`
}

func (q *Queries) UpdateUserById(ctx context.Context, arg UpdateUserByIdParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserById,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.FullName,
		arg.Email,
		arg.Phone,
		arg.JobTitle,
		arg.AvatarUrl,
		arg.LinkedinUrl,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.JobTitle,
		&i.AvatarUrl,
		&i.LinkedinUrl,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.CreateAt,
	)
	return i, err
}
