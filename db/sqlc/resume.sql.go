// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: resume.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createResume = `-- name: CreateResume :one
INSERT INTO resumes (
    id,
    user_id,
    resume_public_id,
    resume_title,
    resume_pdf_url
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, user_id, resume_public_id, resume_title, resume_pdf_url, create_at
`

type CreateResumeParams struct {
	ID             uuid.UUID `json:"id"`
	UserID         uuid.UUID `json:"user_id"`
	ResumePublicID string    `json:"resume_public_id"`
	ResumeTitle    string    `json:"resume_title"`
	ResumePdfUrl   string    `json:"resume_pdf_url"`
}

func (q *Queries) CreateResume(ctx context.Context, arg CreateResumeParams) (Resume, error) {
	row := q.db.QueryRow(ctx, createResume,
		arg.ID,
		arg.UserID,
		arg.ResumePublicID,
		arg.ResumeTitle,
		arg.ResumePdfUrl,
	)
	var i Resume
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ResumePublicID,
		&i.ResumeTitle,
		&i.ResumePdfUrl,
		&i.CreateAt,
	)
	return i, err
}

const getResume = `-- name: GetResume :one
SELECT id, user_id, resume_public_id, resume_title, resume_pdf_url, create_at FROM resumes
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetResume(ctx context.Context, userID uuid.UUID) (Resume, error) {
	row := q.db.QueryRow(ctx, getResume, userID)
	var i Resume
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ResumePublicID,
		&i.ResumeTitle,
		&i.ResumePdfUrl,
		&i.CreateAt,
	)
	return i, err
}

const updateResume = `-- name: UpdateResume :one
UPDATE resumes
SET 
    resume_public_id = COALESCE($1, resume_public_id),
    resume_title = COALESCE($2, resume_title),   
    resume_pdf_url = COALESCE($3, resume_pdf_url) 
WHERE user_id = $4
RETURNING id, user_id, resume_public_id, resume_title, resume_pdf_url, create_at
`

type UpdateResumeParams struct {
	ResumePublicID pgtype.Text `json:"resume_public_id"`
	ResumeTitle    pgtype.Text `json:"resume_title"`
	ResumePdfUrl   pgtype.Text `json:"resume_pdf_url"`
	UserID         uuid.UUID   `json:"user_id"`
}

func (q *Queries) UpdateResume(ctx context.Context, arg UpdateResumeParams) (Resume, error) {
	row := q.db.QueryRow(ctx, updateResume,
		arg.ResumePublicID,
		arg.ResumeTitle,
		arg.ResumePdfUrl,
		arg.UserID,
	)
	var i Resume
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ResumePublicID,
		&i.ResumeTitle,
		&i.ResumePdfUrl,
		&i.CreateAt,
	)
	return i, err
}
