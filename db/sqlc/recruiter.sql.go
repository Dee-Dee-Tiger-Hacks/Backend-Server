// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: recruiter.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createRecruiter = `-- name: CreateRecruiter :one
INSERT INTO recruiters (
  id,
  user_id,
  linkedin_url,
  name,
  company,
  email,
  overview,
  suggested_email,
  potential_topics
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, user_id, linkedin_url, name, company, email, overview, suggested_email, potential_topics, create_at
`

type CreateRecruiterParams struct {
	ID              uuid.UUID `json:"id"`
	UserID          uuid.UUID `json:"user_id"`
	LinkedinUrl     string    `json:"linkedin_url"`
	Name            string    `json:"name"`
	Company         string    `json:"company"`
	Email           string    `json:"email"`
	Overview        string    `json:"overview"`
	SuggestedEmail  string    `json:"suggested_email"`
	PotentialTopics string    `json:"potential_topics"`
}

func (q *Queries) CreateRecruiter(ctx context.Context, arg CreateRecruiterParams) (Recruiter, error) {
	row := q.db.QueryRow(ctx, createRecruiter,
		arg.ID,
		arg.UserID,
		arg.LinkedinUrl,
		arg.Name,
		arg.Company,
		arg.Email,
		arg.Overview,
		arg.SuggestedEmail,
		arg.PotentialTopics,
	)
	var i Recruiter
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LinkedinUrl,
		&i.Name,
		&i.Company,
		&i.Email,
		&i.Overview,
		&i.SuggestedEmail,
		&i.PotentialTopics,
		&i.CreateAt,
	)
	return i, err
}

const getRecruiterById = `-- name: GetRecruiterById :one
SELECT id, user_id, linkedin_url, name, company, email, overview, suggested_email, potential_topics, create_at FROM recruiters
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRecruiterById(ctx context.Context, id uuid.UUID) (Recruiter, error) {
	row := q.db.QueryRow(ctx, getRecruiterById, id)
	var i Recruiter
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LinkedinUrl,
		&i.Name,
		&i.Company,
		&i.Email,
		&i.Overview,
		&i.SuggestedEmail,
		&i.PotentialTopics,
		&i.CreateAt,
	)
	return i, err
}

const getRecruitersByUserId = `-- name: GetRecruitersByUserId :many
SELECT id, user_id, linkedin_url, name, company, email, overview, suggested_email, potential_topics, create_at FROM recruiters
WHERE user_id = $1
`

func (q *Queries) GetRecruitersByUserId(ctx context.Context, userID uuid.UUID) ([]Recruiter, error) {
	rows, err := q.db.Query(ctx, getRecruitersByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Recruiter{}
	for rows.Next() {
		var i Recruiter
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.LinkedinUrl,
			&i.Name,
			&i.Company,
			&i.Email,
			&i.Overview,
			&i.SuggestedEmail,
			&i.PotentialTopics,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecruiterById = `-- name: UpdateRecruiterById :one
UPDATE recruiters 
SET 
    linkedin_url = COALESCE($1, linkedin_url),
    name = COALESCE($2, name),
    company = COALESCE($3, company),
    email = COALESCE($4, email),
    overview = COALESCE($5, overview),
    suggested_email = COALESCE($6, suggested_email),
    potential_topics = COALESCE($7, potential_topics)    
WHERE id = $8
RETURNING id, user_id, linkedin_url, name, company, email, overview, suggested_email, potential_topics, create_at
`

type UpdateRecruiterByIdParams struct {
	LinkedinUrl     pgtype.Text `json:"linkedin_url"`
	Name            pgtype.Text `json:"name"`
	Company         pgtype.Text `json:"company"`
	Email           pgtype.Text `json:"email"`
	Overview        pgtype.Text `json:"overview"`
	SuggestedEmail  pgtype.Text `json:"suggested_email"`
	PotentialTopics pgtype.Text `json:"potential_topics"`
	ID              uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateRecruiterById(ctx context.Context, arg UpdateRecruiterByIdParams) (Recruiter, error) {
	row := q.db.QueryRow(ctx, updateRecruiterById,
		arg.LinkedinUrl,
		arg.Name,
		arg.Company,
		arg.Email,
		arg.Overview,
		arg.SuggestedEmail,
		arg.PotentialTopics,
		arg.ID,
	)
	var i Recruiter
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LinkedinUrl,
		&i.Name,
		&i.Company,
		&i.Email,
		&i.Overview,
		&i.SuggestedEmail,
		&i.PotentialTopics,
		&i.CreateAt,
	)
	return i, err
}
